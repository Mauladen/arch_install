#!/usr/bin/env bash

# Устанавливаем gum для красивого вывода
pacman -S gum --noconfirm

clear

# Функция для установки шрифта
set_font() {
    setfont ter-c32b
    sleep 3
}

set_font

CHROOT="arch-chroot /mnt /bin/bash -c"
COK="[\e[1;32mУСПЕШНО\e[0m]"
CER="[\e[1;31mОШИБКА\e[0m]"

# Функция для выполнения команды и проверки её статуса
show_status() {
    echo -n "Выполняется команда: $@"
    "$@" > /dev/null 2>&1
    local status=$?
    if [ $status -eq 0 ]; then
        echo -e " $COK"
    else
        echo -e " $CER"
        exit 1
    fi
    return $status
}

# Функция для создания разделов
create_partitions() {
    # Получаем список доступных дисков
    echo "Доступные диски и их разделы:"
    lsblk -p -o NAME,SIZE,TYPE

   # Создаем массив с дисками
    mapfile -t DISK_LIST < <(lsblk -d -n -p -o NAME)

    echo "Выберите диск для установки:"
    DISK=$(gum choose "${DISK_LIST[@]}")

    # Проверяем существование диска
    if [ ! -b "$DISK" ]; then
        echo "Диск не существует"
        exit 1
    fi

    # Создаем GPT таблицу разделов
    parted -s "$DISK" mklabel gpt

    # Создаем разделы:
    # 1. EFI раздел (512MB)
    # 2. ROOT раздел (оставшееся место)
    parted -s "$DISK" \
        mkpart ESP fat32 1MiB 513MiB \
        set 1 esp on \
        mkpart primary btrfs 513MiB 100%

    # Обновляем переменные BOOT и ROOT
    if [[ "$DISK" == *"nvme"* ]]; then
        BOOT="${DISK}p1"
        ROOT="${DISK}p2"
    else
        BOOT="${DISK}1"
        ROOT="${DISK}2"
    fi

    # Ждем, пока система обновит информацию о разделах
    sleep 5

    # Получаем PARTUUID корневого раздела
    PARTUUID_ROOT=$(blkid -s PARTUUID -o value $ROOT)

    echo "Разделы созданы успешно:"
    echo "PARTUUID: $PARTUUID_ROOT"
    echo "BOOT: $BOOT"
    echo "ROOT: $ROOT"

    sleep 3
}

# Функция для обновления зеркал и настройки pacman
update_mirrors_and_configure_pacman() {
    show_status pacman -S reflector --noconfirm --needed
    show_status reflector --verbose -l 5 -p https --sort rate --save /etc/pacman.d/mirrorlist
    show_status sed -i s/'#ParallelDownloads = 5'/'ParallelDownloads = 10'/g /etc/pacman.conf
    show_status sed -i '/\[multilib\]/,/Include/s/^[ ]*#//' /etc/pacman.conf
    show_status pacman -Syy
}

# Функция для форматирования и монтирования разделов
format_and_mount_partitions() {
    show_status mkfs.fat -F32 $BOOT
    show_status mkfs.btrfs -f $ROOT
    show_status mount PARTUUID=$PARTUUID_ROOT /mnt
    show_status btrfs subvolume create /mnt/@root
    show_status btrfs subvolume create /mnt/@home
    show_status btrfs subvolume create /mnt/@swap
    show_status umount /mnt
    show_status mount -o rw,noatime,compress=zstd,space_cache=v2,discard=async,subvol=@root $ROOT /mnt
    show_status mkdir -p /mnt/{boot,home,swap}
    show_status mount -o rw,noatime,compress=zstd,space_cache=v2,discard=async,subvol=@home $ROOT /mnt/home
    show_status mount -o rw,noatime,compress=no,space_cache=v2,subvol=@swap $ROOT /mnt/swap
    show_status mount $BOOT /mnt/boot
    
    # Создаем файл подкачки размером 64GB
    show_status dd if=/dev/zero of=/mnt/swap/swapfile bs=1M count=65536 status=progress
    show_status chmod 600 /mnt/swap/swapfile
    show_status chattr +C /mnt/swap/swapfile
    show_status mkswap /mnt/swap/swapfile
    show_status swapon /mnt/swap/swapfile
    
    # Добавляем запись в fstab для автоматического монтирования swap при загрузке
    echo "/swap/swapfile none swap defaults 0 0" >> /mnt/etc/fstab
}

# Функция для установки основных пакетов
install_base_packages() {
    pacstrap /mnt base linux linux-firmware base-devel archlinux-keyring btrfs-progs intel-ucode iucode-tool bluez bluez-utils networkmanager xf86-video-amdgpu libva-mesa-driver mesa vulkan-radeon git pipewire pipewire-alsa pipewire-pulse pipewire-jack wireplumber terminus-font
    genfstab -U /mnt >> /mnt/etc/fstab
}

# Функция для настройки системы
configure_system() {
    show_status $CHROOT "sed -i s/'#en_US.UTF-8'/'en_US.UTF-8'/g /etc/locale.gen"
    show_status $CHROOT "sed -i s/'#ru_RU.UTF-8'/'ru_RU.UTF-8'/g /etc/locale.gen"
    show_status $CHROOT "locale-gen"
    show_status $CHROOT "echo 'LANG=ru_RU.UTF-8' > /etc/locale.conf"
    show_status $CHROOT "echo 'KEYMAP=ru' > /etc/vconsole.conf"
    show_status $CHROOT "echo 'FONT=ter-c32b' >> /etc/vconsole.conf"
    show_status $CHROOT "echo 'archlinux' > /etc/hostname"
    show_status $CHROOT "echo '127.0.0.1 localhost' > /etc/hosts"
    show_status $CHROOT "echo '::1       localhost' >> /etc/hosts"
    show_status $CHROOT "echo '127.0.0.1 archlinux.localdomain archlinux' >> /etc/hosts"
    show_status $CHROOT "sed -i s/'#ParallelDownloads = 5'/'ParallelDownloads = 10'/g /etc/pacman.conf"
    show_status $CHROOT "sed -i s/'#VerbosePkgLists'/'VerbosePkgLists'/g /etc/pacman.conf"
    show_status $CHROOT "sed -i s/'#Color'/'ILoveCandy'/g /etc/pacman.conf"
    show_status $CHROOT "sed -i '/\[multilib\]/,/Include/s/^[ ]*#//' /etc/pacman.conf"
    show_status $CHROOT "mkinitcpio -P"
    show_status $CHROOT "ln -sf /usr/share/zoneinfo/Europe/Moscow /etc/localtime"
    show_status $CHROOT "hwclock --systohc --localtime"
    show_status $CHROOT "echo root:4110 | chpasswd"
    show_status $CHROOT "useradd -m -G wheel -s /bin/bash mauladen"
    show_status $CHROOT "echo mauladen:4110 | chpasswd"
    show_status $CHROOT "sed -i s/'# %wheel ALL=(ALL:ALL) ALL'/'%wheel ALL=(ALL:ALL) ALL'/g /etc/sudoers"
    show_status $CHROOT "systemctl enable NetworkManager.service"
    show_status $CHROOT "systemctl enable bluetooth.service"
}

# Функция для настройки загрузчика
configure_bootloader() {
    show_status $CHROOT "bootctl install"
    if [ -f "/boot/loader/loader.conf" ]; then
        show_status $CHROOT "rm /boot/loader/loader.conf"
    fi
    show_status $CHROOT "echo -e 'default arch.conf\ntimeout 0\nconsole-mode max\neditor no' >> /boot/loader/loader.conf"
    show_status $CHROOT "echo -e 'title Arch Linux\nlinux /vmlinuz-linux\ninitrd /intel-ucode.img\ninitrd /initramfs-linux.img\noptions root=PARTUUID=$PARTUUID_ROOT rw quiet rootflags=subvol=@root resume=/swap/swapfile' >> /boot/loader/entries/loader.conf"
}

# Функция для завершения работы
finish() {
    show_status $CHROOT "exit"
    show_status umount -R /mnt
    echo "reboot"
}

if gum confirm "Начать установку Arch Linux?"; then
    clear
    update_mirrors_and_configure_pacman
    create_partitions
    format_and_mount_partitions
    install_base_packages
    configure_system
    configure_bootloader
    finish
else
    echo -e "Скрипт завершён, никаких изменений в системе не произошло."
    exit
fi
